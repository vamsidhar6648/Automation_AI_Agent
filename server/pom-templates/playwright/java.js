// server/pom-templates/playwright/java.js
// This file provides the AI Generation Guide content for Playwright Java (using JUnit 5 and Maven).

const { toCamelCase, toPascalCase, toShortFeatureName } = require('../../utils/normalizer');

module.exports = (projectName, dynamicBaseUrl) => { 
    const normalizedProjectName = toCamelCase(projectName || 'generated-tests'); 

    const aiGenerationGuideContent = `## AI Code Generation Guide (Playwright Java - JUnit 5 - Maven - Flat Top-Level POM)

**ABSOLUTELY CRITICAL INSTRUCTIONS: ADHERE WITHOUT EXCEPTION.**
**FAILURE TO FOLLOW THESE INSTRUCTIONS WILL RESULT IN INVALID OR UNUSABLE CODE.**
* **NO EXTRA TEXT**: Do not add any conversational elements, greetings, prefaces, or explanations outside the final JSON.
* **STRICT OUTPUT FORMAT**: Your entire response MUST be a single JSON object. Keys are relative file paths, values are file contents.
* **PURE CODE OUTPUT**: File contents MUST be valid code. No delimiters ([[CODE_START]], [[CODE_END]]) or markdown code block markers (\\\`\\\`\\\`java) INSIDE the file content strings.
* **EXACT STRING REPLICATION IS REQUIRED for test class and test method names.**
* **DO NOT GENERATE LOCATORS FOR THE AI AGENT'S OWN UI. ONLY GENERATE LOCATORS FOR THE APPLICATION UNDER TEST.**
* **JAVA SYNTAX:**
    * Use standard Java conventions (camelCase for methods/variables, PascalCase for classes).
    * Use standard indentation (4 spaces).
    * Imports should be at the top of each file.

---

**Key Naming Conventions (ABSOLUTELY STRICT - NOW FLAT TOP-LEVEL):**
* **Unique Feature Name (Shortened):** For each unique "Test Scenario", generate a **concise, unique and meaningful name**.
    * **This "Unique Feature Name" (camelCase) will be used for \\\`{featureName}\\\` in test class file names (e.g., 'LoginTest.java').**
    * **The PascalCase version of this "Unique Feature Name" will be used for \\\`{FeatureName}\\\` for Page Object and Locator file/class names (e.g., 'LoginPage.java', 'LoginLocators.java').**
    * **Examples of Transformation:**
        * "Verify User Login Functionality with Valid Credentials" -> "login" (\\\`{featureName}\\\`); "Login" (\\\`{FeatureName}\\\`)

* **Locator Class Path/Name:** \\\`src/main/java/pageobjects/{FeatureName}Locators.java\\\` (e.g., \\\`src/main/java/pageobjects/LoginLocators.java\\\`).
* **Page Object Class Path/Name:** \\\`src/main/java/pages/{FeatureName}Page.java\\\` (e.g., \\\`src/main/java/pages/LoginPage.java\\\`).
* **Test Class Path/Name:** \\\`src/test/java/tests/{FeatureName}Test.java\\\` (e.g., \\\`src/test/java/tests/LoginTest.java\\\`).
* **Page Object Class Name:** \\\`{FeatureName}Page\\\` (e.g., \\\`LoginPage\\\`).
* **Locator Class Name:** \\\`{FeatureName}Locators\\\` (e.g., \\\`LoginLocators\\\`).
* **Test Class Name:** \\\`{FeatureName}Test\\\` (e.g., \\\`LoginTest\\\`).
* **Test Method Name:** \\\`camelCase\\\` (e.g., \\\`verifySuccessfulLoginWithValidCredentials\\\`).

* **TEST CLASS NAME:** The test class name (e.g., \\\`LoginTest\\\`) should reflect the "Test Scenario" title.
* **TEST METHOD NAME AND TAGS:** The test method name **MUST BE DERIVED from the "Test Case Description" and formatted as camelCase (e.g., \\\`verifySuccessfulLoginWithValidCredentials\\\`)**. **DO NOT ADD ANY PREFIXES, SUFFIXES, OR MODIFY THE CORE METHOD NAME.**
    * **CRITICAL: Prepend tags based on the 'Testcase Priority' column in Excel.** Use JUnit 5 \\\`@Tag("tagName")\\\` annotations. You can have multiple \\\`@Tag\\\` annotations.
        * If 'Testcase Priority' is **P1**: add \\\`@Tag("smoke")\\\n@Tag("reg")\\\`
        * If 'Testcase Priority' is **P2**: add \\\`@Tag("sanity")\\\n@Tag("reg")\\\`
        * If 'Testcase Priority' is **P3**: add \\\`@Tag("reg")\\\`
    * Example: If Excel says "Verify successful login with valid credentials." and priority is P1, test method signature should be: \\\`@Test\n@Tag("smoke")\n@Tag("reg")\npublic void verifySuccessfulLoginWithValidCredentials() { ... }\\\`.

* **Test Data (from "Test Data" column):**
    * Parse "Test Data" (e.g., "username:value1, password:value2") into parameters passed to Page Object methods.
    * **CRITICAL: Pass these parsed data values directly as arguments to Page Object methods.**
    * **DO NOT hardcode test data values directly into the generated code.**

---

**AI's Responsibility (based on Excel Data, User Preferences, Confirmed Structure, and PROVIDED LISTS):**

1.  **Project Structure Adherence (Playwright Java Specific):**
    * **IMPORTANT: The following base project files are provided by the server and DO NOT need to be generated by you:** \\\`pom.xml\\\`, \\\`src/main/java/base/BaseTest.java\\\`, \\\`src/main/java/utils/BrowserManager.java\\\`, \\\`.env\\\`, \\\`.gitignore\\\`, \\\`README.md\\\`. **DO NOT include these in your JSON output.**
    * You are ONLY responsible for generating the dynamic test-specific files:
        * **Nested \\\`src/main/java/pageobjects/{FeatureName}Locators.java\\\` for locators.**
        * **Nested \\\`src/main/java/pages/{FeatureName}Page.java\\\` for page object classes.**
        * **Nested \\\`src/test/java/tests/{FeatureName}Test.java\\\` for test classes.**
        * **NO separate WebActions/WebDriver setup file generation:** Common Playwright actions are in \\\`BaseTest.java\\\` or directly in Page Objects; Browser setup is in \\\`BrowserManager.java\\\`.

2.  **Generate Locator Classes (in \\\`src/main/java/pageobjects/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (\\\`{FeatureName}\\\`). Create a new Java file named \\\`{FeatureName}Locators.java\\\` (e.g., \\\`src/main/java/pageobjects/LoginLocators.java\\\`).
    * This class should define static Playwright \\\`Locator\\\` instances or methods that return \\\`Locator\\\`. Use appropriate Playwright selectors.
    * **CRITICAL**: These locators must be for the **APPLICATION UNDER TEST ONLY**.

3.  **Generate Page Object Classes (in \\\`src/main/java/pages/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (\\\`{FeatureName}\\\`). Create a new Java file named \\\`{FeatureName}Page.java\\\` (e.g., \\\`src/main/java/pages/LoginPage.java\\\`).
    * This class **MUST** have a constructor that accepts \\\`Page page\\\` and stores it.
    * It **MUST import its corresponding Locator class** (e.g., \\\`import pageobjects.LoginLocators;\\\`).
    * **Methods:** Implement high-level methods corresponding to user actions/flows using the \\\`Page page\\\` object and locators (e.g., \\\`page.locator(LoginLocators.USERNAME_FIELD).fill(username);\\\`).
    * **Assertions:** Page Object methods can return data or perform basic assertions using Playwright \\\`Assertions\\\` (e.g., \\\`assertThat(page).hasURL(expectedUrl);\\\`).

4.  **Generate Test Classes (in \\\`src/test/java/tests/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (\\\`{FeatureName}\\\`). Create a new Java file named \\\`{FeatureName}Test.java\\\` (e.g., \\\`src/test/java/tests/LoginTest.java\\\`).
    * This class **MUST** extend \\\`BaseTest\\\` (e.g., \\\`public class LoginTest extends BaseTest { ... }\\\`).
    * It MUST import relevant Page Objects (e.g., \\\`import pages.LoginPage;\\\`).
    * Use JUnit 5 \\\`@Test\\\` annotation for each test method.
    * For each "Test Case Description", create a test method with the derived \\\`camelCase\\\` name, **INCLUDING THE REQUIRED \\\`@Tag\\\` ANNOTATIONS.**
    * Call Page Object methods for test steps, passing actual parsed data as arguments.
    * Implement assertions based on "Expected Result" using Playwright \\\`Assertions\\\` (e.g., \\\`assertThat(page.locator("#someElement")).isVisible();\\\`).

---

**THE FOLLOWING IS THE ABSOLUTE, REQUIRED JSON OUTPUT STRUCTURE. You MUST generate ONLY these files and their contents. DO NOT include any other files.**
\`\`\`json
{
  // IMPORTANT: For each unique Test Scenario, you MUST generate these files:
  "src/main/java/pageobjects/{FeatureName}Locators.java": "// content of {FeatureName}Locators.java",
  "src/main/java/pages/{FeatureName}Page.java": "// content of {FeatureName}Page.java",
  "src/test/java/tests/{FeatureName}Test.java": "// content of {FeatureName}Test.java"
}
\`\`\`
**REPLACE "// content of ..." with the actual full code for each file.**
**Ensure ALL mentioned files above are present in your JSON output, using dynamic FeatureName/featureName.**
`;

    return {
        "AI_GENERATION_GUIDE.md": aiGenerationGuideContent
    };
};