// server/pom-templates/selenium/python.js
// This file provides the AI Generation Guide content for Selenium Python (using pytest).

const { toCamelCase, toPascalCase, toShortFeatureName } = require('../../utils/normalizer');

module.exports = (projectName, dynamicBaseUrl) => { 
    const normalizedProjectName = toCamelCase(projectName || 'generated-tests'); 

    const aiGenerationGuideContent = `## AI Code Generation Guide (Selenium Python - Pytest - Flat Top-Level POM)

**ABSOLUTELY CRITICAL INSTRUCTIONS: ADHERE WITHOUT EXCEPTION.**
**FAILURE TO FOLLOW THESE INSTRUCTIONS WILL RESULT IN INVALID OR UNUSABLE CODE.**
* **NO EXTRA TEXT**: Do not add any conversational elements, greetings, prefaces, or explanations outside the final JSON.
* **STRICT OUTPUT FORMAT**: Your entire response MUST be a single JSON object. Keys are relative file paths, values are file contents.
* **PURE CODE OUTPUT**: File contents MUST be valid code. No delimiters ([[CODE_START]], [[CODE_END]]) or markdown code block markers (\\\`\\\`\\\`python) INSIDE the file content strings.
* **EXACT STRING REPLICATION IS REQUIRED for test class and test method names.**
* **DO NOT GENERATE LOCATORS FOR THE AI AGENT'S OWN UI. ONLY GENERATE LOCATORS FOR THE APPLICATION UNDER TEST.**
* **PYTHON SYNTAX:**
    * Use 4 spaces for indentation.
    * Class names: PascalCase.
    * Method/function/variable names: snake_case.
    * File names: snake_case.py.
    * Imports should be at the top of each file.

---

**Key Naming Conventions (ABSOLUTELY STRICT - NOW FLAT TOP-LEVEL):**
* **Unique Feature Name (Shortened):** For each unique "Test Scenario", generate a **concise, unique and meaningful name**.
    * **This "Unique Feature Name" (snake_case) will be used for \\\`{featureName}\\\` in test module file names (e.g., 'test_login.py').**
    * **The PascalCase version of this "Unique Feature Name" will be used for \\\`{FeatureName}\\\` for Page Object and Locator module/class names (e.g., 'LoginPage.py', 'LoginLocators.py').**
    * **Examples of Transformation:**
        * "Verify User Login Functionality with Valid Credentials" -> "login" (snake_case: \\\`login\\\`); "Login" (PascalCase: \\\`Login\\\`)

* **Locator Module Path/Name:** \\\`src/locators/{featureName}_locators.py\\\` (e.g., \\\`src/locators/login_locators.py\\\`).
* **Page Object Module Path/Name:** \\\`src/pages/{featureName}_page.py\\\` (e.g., \\\`src/pages/login_page.py\\\`).
* **Test Module Path/Name:** \\\`tests/test_{featureName}.py\\\` (e.g., \\\`tests/test_login.py\\\`).
* **Page Object Class Name:** \\\`{FeatureName}Page\\\` (e.g., \\\`LoginPage\\\`).
* **Locator Class Name:** \\\`{FeatureName}Locators\\\` (e.g., \\\`LoginLocators\\\`).
* **Test Class Name (Optional, if using class-based tests):** \\\`Test{FeatureName}Functionality\\\` (e.g., \\\`TestLoginFunctionality\\\`).
* **Test Method Name:** \\\`test_{snake_case_description}\\\` (e.g., \\\`test_successful_login_with_valid_credentials\\\`).

* **TEST CLASS NAME (if used):** Should be \\\`Test{FeatureName}Functionality\\\`.
* **TEST METHOD NAME AND TAGS:** The test method name **MUST BE DERIVED from the "Test Case Description" and formatted as snake_case, prefixed with \\\`test_\\\` (e.g., \\\`test_successful_login_with_valid_credentials\\\`)**.
    * **CRITICAL: Add tags based on the 'Testcase Priority' column in Excel.** Use \\\`@pytest.mark.<tagname>\\\` decorators. Multiple tags mean multiple decorators.
        * If 'Testcase Priority' is **P1**: add \\\`@pytest.mark.smoke\n@pytest.mark.reg\\\`
        * If 'Testcase Priority' is **P2**: add \\\`@pytest.mark.sanity\n@pytest.mark.reg\\\`
        * If 'Testcase Priority' is **P3**: add \\\`@pytest.mark.reg\\\`
    * Example: If Excel says "Verify successful login with valid credentials." and priority is P1, test method signature should be: \\\`@pytest.mark.smoke\n@pytest.mark.reg\ndef test_successful_login_with_valid_credentials(driver): ...\\\`.

* **Test Data (from "Test Data" column):**
    * Parse "Test Data" (e.g., "username:value1, password:value2") into parameters passed to Page Object methods.
    * **CRITICAL: Pass these parsed data values directly as arguments to Page Object methods.**
    * **DO NOT hardcode test data values directly into the generated code.**

---

**AI's Responsibility (based on Excel Data, User Preferences, Confirmed Structure, and PROVIDED LISTS):**

1.  **Project Structure Adherence (Selenium Python Specific):**
    * **IMPORTANT: The following base project files are provided by the server and DO NOT need to be generated by you:** \\\`pyproject.toml\\\`, \\\`conftest.py\\\`, \\\`utils/driver_setup.py\\\`, \\\`.env\\\`, \\\`.gitignore\\\`, \\\`README.md\\\`, \\\`requirements.txt\\\`. **DO NOT include these in your JSON output.**
    * You are ONLY responsible for generating the dynamic test-specific files:
        * **Nested \\\`src/locators/{featureName}_locators.py\\\` for locators.**
        * **Nested \\\`src/pages/{featureName}_page.py\\\` for page object classes.**
        * **Top-level \\\`tests/test_{featureName}.py\\\` for test modules.**
        * **Files directly under these specific directories; NO other nested feature-specific sub-directories.**

2.  **Generate Locator Modules (in \\\`src/locators/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (snake_case \\\`{featureName}\\\`). Create a new Python file named \\\`{featureName}_locators.py\\\` (e.g., \\\`src/locators/login_locators.py\\\`).
    * This module should define locators (e.g., \\\`USERNAME_FIELD = (By.ID, "username")\\\`). Import \\\`By\\\` from \\\`selenium.webdriver.common.by\\\`.
    * **CRITICAL**: These locators must be for the **APPLICATION UNDER TEST ONLY**.

3.  **Generate Page Object Modules (in \\\`src/pages/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (snake_case \\\`{featureName}\\\`). Create a new Python file named \\\`{featureName}_page.py\\\` (e.g., \\\`src/pages/login_page.py\\\`).
    * This file should contain a class named \\\`{FeatureName}Page\\\`.
    * This class **MUST** have a constructor that accepts \\\`driver: WebDriver\\\` and stores it.
    * It **MUST import its corresponding Locator module** (e.g., \\\`from locators.login_locators import LoginLocators\\\`).
    * **Methods:** Implement high-level methods corresponding to user actions/flows using the \\\`self.driver\\\` and imported locators (e.g., \\\`self.driver.find_element(*LoginLocators.USERNAME_FIELD).send_keys(username)\\\`).

4.  **Generate Test Modules (in \\\`tests/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (snake_case \\\`{featureName}\\\`). Create a new Python file named \\\`test_{featureName}.py\\\` (e.g., \\\`tests/test_login.py\\\`).
    * It MUST import \\\`pytest\\\`.
    * It MUST import relevant Page Objects (e.g., \\\`from pages.login_page import LoginPage\\\`).
    * For each "Test Case Description", create a test function (prefixed with \\\`test_\\\`) or a test method within a class.
    * **CRITICAL: Add the required \\\`@pytest.mark\\\` ANNOTATIONS.**
    * Test functions/methods **MUST** accept a \\\`driver\\\` fixture as an argument (e.g., \\\`def test_something(driver):\\\`).
    * Call Page Object methods for test steps, passing actual parsed data as arguments.
    * Implement assertions based on "Expected Result" using Python's native \\\`assert\\\` or \\\`pytest.assume\\\`.

---

**THE FOLLOWING IS THE ABSOLUTE, REQUIRED JSON OUTPUT STRUCTURE. You MUST generate ONLY these files and their contents. DO NOT include any other files.**
\`\`\`json
{
  // IMPORTANT: For each unique Test Scenario, you MUST generate these files:
  "src/locators/{featureName}_locators.py": "// content of {featureName}_locators.py",
  "src/pages/{featureName}_page.py": "// content of {featureName}_page.py",
  "tests/test_{featureName}.py": "// content of test_{featureName}.py"
}
\`\`\`
**REPLACE "// content of ..." with the actual full code for each file.**
**Ensure ALL mentioned files above are present in your JSON output, using dynamic FeatureName/featureName.**
`;

    return {
        "AI_GENERATION_GUIDE.md": aiGenerationGuideContent
    };
};