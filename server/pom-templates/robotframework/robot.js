// server/pom-templates/robotframework/robot.js
// This file provides the AI Generation Guide content for Robot Framework.

const { toCamelCase, toPascalCase, toShortFeatureName } = require('../../utils/normalizer');

module.exports = (projectName, dynamicBaseUrl) => { 
    const normalizedProjectName = toCamelCase(projectName || 'generated-tests'); 

    const aiGenerationGuideContent = `## AI Code Generation Guide (Robot Framework - Keyword-Driven)

**ABSOLUTELY CRITICAL INSTRUCTIONS: ADHERE WITHOUT EXCEPTION.**
**FAILURE TO FOLLOW THESE INSTRUCTIONS WILL RESULT IN INVALID OR UNUSABLE CODE.**
* **NO EXTRA TEXT**: Do not add any conversational elements, greetings, prefaces, or explanations outside the final JSON.
* **STRICT OUTPUT FORMAT**: Your entire response MUST be a single JSON object. Keys are relative file paths, values are file contents.
* **PURE CODE OUTPUT**: File contents MUST be valid code. No delimiters ([[CODE_START]], [[CODE_END]]) or markdown code block markers (\\\`\\\`\\\`robotframework) INSIDE the file content strings.
* **EXACT STRING REPLICATION IS REQUIRED for test suite and test case titles.**
* **DO NOT GENERATE LOCATORS FOR THE AI AGENT'S OWN UI. ONLY GENERATE LOCATORS FOR THE APPLICATION UNDER TEST.**
* **ROBOT FRAMEWORK SYNTAX:**
    * Use 4 spaces for indentation.
    * Keywords are separated by 2 or more spaces.
    * Variables start with \\\`\${}\\\` or \\\`@{}\\ \`.
    * Comments start with \\\`#\\\`.

---

**Key Naming Conventions (ABSOLUTELY STRICT - NOW FLAT TOP-LEVEL):**
* **Unique Feature Name (Shortened):** For each unique "Test Scenario", generate a **concise, unique and meaningful name**.
    * **This "Unique Feature Name" (camelCase) will be used for \\\`{featureName}\\\` in test suite file names (e.g., 'login.robot').**
    * **The PascalCase version of this "Unique Feature Name" will be used for \\\`{FeatureName}\\\` for Keyword/Resource file names (e.g., 'LoginPageKeywords.robot').**
    * **Examples of Transformation:**
        * "Verify User Login Functionality with Valid Credentials" -> "login" (\\\`{featureName}\\\`); "Login" (\\\`{FeatureName}\\\`)

* **Resource/Locator File Path/Name:** \\\`resources/{FeatureName}Resources.robot\\\` (e.g., \\\`resources/LoginResources.robot\\\`).
* **Keyword Library/Page Object File Path/Name:** \\\`keywords/{FeatureName}Keywords.robot\\\` (e.g., \\\`keywords/LoginPageKeywords.robot\\\`).
* **Test Suite File Path/Name:** \\\`tests/{featureName}.robot\\\` (e.g., \\\`tests/login.robot\\\`).
* **Keyword Name:** \\\`Pascal Case\\\` (e.g., \\\`Login With Valid Credentials\\\`, \\\`Verify Dashboard Page Is Loaded\\\`).

* **TEST SUITE TITLE:** The title for *** Settings *** section's documentation or the file name itself should reflect the "Test Scenario."
* **TEST CASE TITLE AND TAGS:** The title for *** Test Cases *** section's test case **MUST BE THE ABSOLUTE, EXACT STRING** from the "Test Case Description" column in Excel. **DO NOT ADD ANY PREFIXES, SUFFIXES, OR MODIFY THIS STRING, EXCEPT FOR PREPENDING TAGS.**
    * **CRITICAL: Prepend tags based on the 'Testcase Priority' column in Excel.** Robot Framework supports tags directly under test case name.
        * If 'Testcase Priority' is **P1**: add \\\`[Tags] smoke reg\\\` (e.g., \\\`Verify successful login\\\n\\\`[Tags] smoke reg\\\n...\\\`)
        * If 'Testcase Priority' is **P2**: add \\\`[Tags] sanity reg\\\`
        * If 'Testcase Priority' is **P3**: add \\\`[Tags] reg\\\`

* **Test Data (from "Test Data" column):**
    * Parse "Test Data" (e.g., "username:value1, password:value2") into variables (e.g., \\\`\${USERNAME}\\\`, \\\`\${PASSWORD}\\\`) in the *** Variables *** section of the test suite or passed as arguments to keywords.
    * **CRITICAL: Pass these parsed data values directly as arguments to Keywords or use them as variables.**
    * **DO NOT hardcode test data values directly into the generated code.**

---

**AI's Responsibility (based on Excel Data, User Preferences, Confirmed Structure, and PROVIDED LISTS):**

1.  **Project Structure Adherence (Robot Framework Specific):**
    * **IMPORTANT: The following base project files are provided by the server and DO NOT need to be generated by you:** \\\`package.json\\\`, \\\`robot.config\\\`, \\\`.env\\\`, \\\`.gitignore\\\`, \\\`README.md\\\`, \\\`requirements.txt\\\`. **DO NOT include these in your JSON output.**
    * You are ONLY responsible for generating the dynamic test-specific files:
        * **Top-level \\\`resources/\\\` for common elements/locators (\\\`{FeatureName}Resources.robot\\\`).**
        * **Top-level \\\`keywords/\\\` for keyword libraries/Page Objects (\\\`{FeatureName}Keywords.robot\\\`).**
        * **Top-level \\\`tests/\\\` for test suite files (\\\`{featureName}.robot\\\`).**
        * **Files directly under these root-level directories; NO nested feature-specific sub-directories.**

2.  **Generate Resource Files (in \\\`resources/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (\\\`{FeatureName}\\\`). Create a new Robot file named \\\`{FeatureName}Resources.robot\\\` (e.g., \\\`resources/LoginResources.robot\\\`).
    * This file should contain the *** Settings *** section for importing Libraries (e.g., \\\`SeleniumLibrary\\\`) and any common variables or web elements (locators) in the *** Variables *** section.
    * **Locators:** Define locators in the *** Variables *** section using clear names (e.g., \\\`\${USERNAME_FIELD}    id=username\\\`). Prioritize ID, Name, CSS Selector, or XPath.
    * **CRITICAL**: These locators must be for the **APPLICATION UNDER TEST ONLY**.

3.  **Generate Keyword Library Files (in \\\`keywords/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (\\\`{FeatureName}\\\`). Create a new Robot file named \\\`{FeatureName}Keywords.robot\\\` (e.g., \\\`keywords/LoginPageKeywords.robot\\\`).
    * This file should have a *** Settings *** section to import the relevant Resource file (e.g., \\\`Resource    ../resources/LoginResources.robot\\\`).
    * It should define keywords (like Page Object methods) in the *** Keywords *** section.
    * **Keywords:** Implement high-level keywords corresponding to user actions/flows using standard Robot Framework keywords (e.g., \\\`Input Text\\\`, \\\`Click Element\\\`, \\\`Page Should Contain Element\\\`).
    * **Interaction:** Keywords should use locators from the imported Resource file.

4.  **Generate Test Suite Files (in \\\`tests/\\\` folder):**
    * For each unique "Test Scenario", use its "Unique Feature Name" (\\\`{featureName}\\\`). Create a new Robot file named \\\`{featureName}.robot\\\` (e.g., \\\`tests/login.robot\\\`).
    * Include a *** Settings *** section to import the relevant Keyword Library (e.g., \\\`Resource    ../keywords/LoginPageKeywords.robot\\\`).
    * Define test cases in the *** Test Cases *** section.
    * For each "Test Case Description", create a test case with the **EXACT** "Test Case Description" title, **INCLUDING THE REQUIRED TAGS.**
    * Call keywords from the imported Keyword Library for test steps.
    * Implement assertions based on "Expected Result" using appropriate Robot Framework keywords.

---

**THE FOLLOWING IS THE ABSOLUTE, REQUIRED JSON OUTPUT STRUCTURE. You MUST generate ONLY these files and their contents. DO NOT include any other files.**
\`\`\`json
{
  // IMPORTANT: For each unique Test Scenario, you MUST generate these files:
  "resources/{FeatureName}Resources.robot": "// content of {FeatureName}Resources.robot",
  "keywords/{FeatureName}Keywords.robot": "// content of {FeatureName}Keywords.robot",
  "tests/{featureName}.robot": "// content of {featureName}.robot"
}
\`\`\`
**REPLACE "// content of ..." with the actual full code for each file.**
**Ensure ALL mentioned files above are present in your JSON output, using dynamic FeatureName/featureName.**
`;

    return {
        "AI_GENERATION_GUIDE.md": aiGenerationGuideContent
    };
};