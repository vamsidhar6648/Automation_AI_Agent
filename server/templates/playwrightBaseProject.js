// server/templates/playwrightBaseProject.js
// This file contains the static, boilerplate content for a Playwright JavaScript project.
// These files will be written directly by the server (generateFromJSON.js), not generated by the AI.

const { toCamelCase } = require('../utils/normalizer'); // Still needed for project name normalization

module.exports = (projectName, dynamicBaseUrl) => {
    const normalizedProjectName = toCamelCase(projectName || 'generated-tests');

    return {
        "package.json": `{
    "name": "${normalizedProjectName}",
    "version": "1.0.0",
    "description": "AI Generated Playwright Tests for ${projectName} (JavaScript)",
    "main": "index.js",
    "scripts": {
        "test": "npx playwright test",
        "test-headed": "npx playwright test --headed",
        "show-report": "npx playwright show-report",
        "smoke": "npx playwright test --grep @smoke",
        "reg": "npx playwright test --grep @reg",
        "sanity": "npx playwright test --grep @sanity"
    },
    "keywords": [
        "ai",
        "automation",
        "testing",
        "playwright",
        "javascript",
        "pom",
        "generated"
    ],
    "author": "AI Testflow Agent",
    "license": "ISC",
    "devDependencies": {
        "@playwright/test": "^1.45.0",
        "dotenv": "^16.4.5"
    }
}`,
        "playwright.config.js": `require('dotenv').config();
import { defineConfig, devices } from '@playwright/test';

// Use environment variable for BASE_URL, with a fallback
const baseURL = process.env.BASE_URL || '${dynamicBaseUrl}';
const defaultTimeout = 60000; // 60 seconds for actions/assertions

export default defineConfig({
    testDir: './tests', // Tests directly under 'tests' folder (now flat)
    timeout: defaultTimeout,
    fullyParallel: true,
    forbidOnly: !!process.env.CI,
    retries: process.env.CI ? 2 : 0,
    workers: process.env.CI ? 1 : undefined,
    reporter: 'html',
    use: {
        baseURL: baseURL,
        trace: 'on-first-retry',
        headless: true, // Run in headless mode by default
    },
    projects: [
        {
            name: 'chromium',
            use: { ...devices['Desktop Chrome'] },
        },
        // You can add other browsers here if needed
    ],
});`,
        ".env": `BASE_URL=${dynamicBaseUrl}
# You can add other environment variables here, e.g.,
# USERNAME=your_app_username
# PASSWORD=your_app_password`,
        ".gitignore": `node_modules/
allure-results/
playwright-report/
.env`,

        // --- Core Page Object Model Structure Files ---
        // These are base templates that the AI-generated code will then build upon or import from.
        // They are static and provided directly by the server.

        "utils/WebActions.js": `import { Page, test, expect, Locator } from "@playwright/test";

export class WebActions {
    page;
    constructor(page) {
        this.page = page;
    }

    async openApplication(url) {
        await test.step('Open the application at ' + url, async () => {
            await this.page.goto(url);
            await this.page.waitForLoadState('domcontentloaded');
        });
    }

    async click(selector, label) {
        await test.step('Clicked on "' + (label || selector) + '"', async () => {
            try {
                const locator = typeof selector === 'string' ? this.page.locator(selector) : selector;
                await locator.waitFor({ state: "visible", timeout: 10000 });
                await locator.click();
            } catch (error) {
                console.error(\`Element '\${label || selector}' was not clickable:\`, error);
                throw new Error(\`Failed to click on '\${label || selector}': \${error.message}\`);
            }
        });
    }

    async fill(selector, value, label, clearBefore) {
        await test.step('Filling "' + (label || selector) + '" with "' + value + '"', async () => {
            try {
                const locator = typeof selector === 'string' ? this.page.locator(selector) : selector;
                await locator.waitFor({ state: "visible", timeout: 10000 });
                if (clearBefore) {
                    await locator.clear();
                }
                await locator.fill(value);
            } catch (error) {
                console.error(\`Failed to fill '\${label || selector}':\`, error);
                throw new Error(\`Failed to fill '\${label || selector}': \${error.message}\`);
            }
        });
    }

    async getText(selector, label) {
        let textContent = '';
        await test.step('Getting text from "' + (label || selector) + '"', async () => {
            try {
                const locator = typeof selector === 'string' ? this.page.locator(selector) : selector;
                await locator.waitFor({ state: "visible", timeout: 10000 });
                textContent = await locator.textContent() || '';
            } catch (error) {
                console.error(\`Failed to get text from '\${label || selector}':\`, error);
                throw new Error(\`Failed to get text from '\${label || selector}': \${error.message}\`);
            }
        });
        return textContent;
    }

    async expectVisible(selector, label) {
        await test.step('Verify "' + (label || selector) + '" is visible', async () => {
            const locator = typeof selector === 'string' ? this.page.locator(selector) : selector;
            await expect(locator).toBeVisible({ timeout: 10000 });
        });
    }

    async expectURL(expectedUrl, label) {
        await test.step('Verify URL is "' + expectedUrl + '" for "' + label + '"', async () => {
            await expect(this.page).toHaveURL(expectedUrl, { timeout: 10000 });
        });
    }

    async waitForPageReady() {
        await test.step('Waiting for page to be ready (networkidle)', async () => {
            await this.page.waitForLoadState('networkidle');
        });
    }

    // AI TO ADD NEW WEBACTIONS METHODS HERE BASED ON 'REQUIRED WEBACTIONS METHODS' LIST
    // These methods will be generated by AI and appended to this file content if necessary.
}
`,
        // Removed testFixtures/baseFixture.js from here, as it will now be dynamically generated by the AI
        // and its content handled by a post-processing step for robustness.

        "README.md": `
# ${normalizedProjectName} - AI Generated Automation Tests

This project contains AI-generated Playwright tests for your application, based on the test scenarios you provided.

## Getting Started

Follow these steps to set up and run your tests:

### 1. Open in VS Code

If you used the "Open in VS Code" button, this project should already be open. Otherwise, navigate to the \`workspace/${normalizedProjectName}\` directory and open it with VS Code.

### 2. Install Dependencies

Open the Integrated Terminal in VS Code (Terminal > New Terminal) and run the following command to install the necessary Node.js packages:

\`\`\`bash
npm install
\`\`\`

### 3. Install Browser Binaries

Playwright requires specific browser binaries. Run this command in the terminal:

\`\`\`bash
npx playwright install
\`\`\`

### 4. Configure Base URL (Optional but Recommended)

If your application's URL changes, or if you want to run tests against different environments, update the \`BASE_URL\` in the \`.env\` file:

\`\`\`dotenv
BASE_URL=${dynamicBaseUrl}
\`\`\`

### 5. Run Your Tests

You can now run your tests using the following commands in the VS Code terminal:

* **Run all tests (headless):**
    \`\`\`bash
    npm test
    \`\`\`

* **Run all tests (with browser UI):**
    \`\`\`bash
    npm run test-headed
    \`\`\`

* **Run specific test tags:**
    * **Smoke & Regression tests (P1 Priority):**
        \`\`\`bash
        npm run smoke
        \`\`\`
    * **Sanity & Regression tests (P2 Priority):**
        \`\`\`bash
        npm run sanity
        \`\`\`
    * **All Regression tests (P1, P2, P3 Priorities):**
        \`\`\`bash
        npm run reg
        \`\`\`

* **Show Test Report:**
    After running tests, generate and view the HTML report:
    \`\`\`bash
    npm run show-report
    \`\`\`
    This will open the report in your browser.

Happy Testing!
`
    };
};